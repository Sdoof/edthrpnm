
##
# to be more vectorized version of Simulate

Simulate_tbd <- function (position,
                       #Total Stimulation Num
                       StimultaionNum=1000,
                       #Max Stimulation day.
                       MaxStimDay,PosMultip=PosMultip,
                       #underlying daily return for geometic brown motion
                       mu_udly,
                       #underlying initial daily volatility.
                       sigma_udly,
                       #volatility drift mu of geometric brown motion
                       mu_iv,
                       #vov of geometric brown motion
                       sigma_iv,
                       #Assumed Realized Volatility and IV ratio
                       HV_IV_Adjust_Ratio,
                       #randomness introduced to calculated(estimated) IV
                       IV_DEVIATION) {
  
  #List of Every Result
  start_t<-proc.time()  
  StimRslts<-vector("list",StimultaionNum)
  for(ith_stim in 1:StimultaionNum){
    #Stimulation processed on this data frame
    XTStim<-position
    XTOrig<-position
    #Stimulation day
    #returned as a vector. So get the first element.
    stim_days_num<-min(get.busdays.between(XTOrig$Date,XTOrig$ExpDate))-1
    #if MaxStimDay<stim_days_num, stim_days_num<-MaxStimDay.
    stim_days_num<-as.numeric(MaxStimDay<stim_days_num)*(MaxStimDay-stim_days_num)+stim_days_num
    
   
    #get the underlying changed of all days.
    udly_prices <- geombrmtn.stimulate(s0=XTStim$UDLY[[1]],mu=mu_udly,sigma=sigma_udly,length=stim_days_num)
    #cat(udly_prices,sep=",","\n")
    udly_prices <- udly_prices[-1]
    cat(udly_prices,sep=",","\n")
    
    udly_prices_chgPercent <- udly_prices
    tmp<-replace(udly_prices_chgPercent,rep(2:length(udly_prices_chgPercent)),udly_prices_chgPercent[1:length(udly_prices_chgPercent)-1])
    udly_prices_chgPercent<-udly_prices_chgPercent/tmp
    udly_prices_chgPercent[1]<-(XTStim$UDLY[[1]]/udly_prices[1])
    cat(udly_prices_chgPercent,sep=",","\n")
    
    #get and create the IV change percent to base IV
    iv_chgPercnt <- geombrmtn.stimulate(s0=1.0,mu=mu_iv,sigma=sigma_iv,length=stim_days_num)
    iv_chgPercnt <- iv_chgPercnt[-1]
    tmp<-replace(iv_chgPercnt,rep(2:length(iv_chgPercnt)),iv_chgPercnt[1:length(iv_chgPercnt)-1])
    tmp[1]<-1
    iv_chgPercnt<-iv_chgPercnt/tmp
    #cat(iv_chgPercnt,sep=",","\n")
    
    SimparamNames<-c("StimDays","Mu_udl","Sigma_udl","Mu_iv","Sigma_iv")
    StimulationParameters <- vector("list",length(SimparamNames))
    StimulationParameters[[1]]<-stim_days_num
    StimulationParameters[[2]]<-mu_udly
    StimulationParameters[[3]]<-sigma_udly
    StimulationParameters[[4]]<-mu_iv
    StimulationParameters[[5]]<-sigma_iv
    names(StimulationParameters)<-SimparamNames
    
    #First calculate original Position Grks
    orgPositionGrk<-getPositionGreeks(XTOrig,multi=PosMultip,HV_IV_Adjust_Ratio)
    #print(orgPositionGrk)
    
    #Push original histIV, later Poped
    histIVOrig<-histIV
    
    #Prepare the stored values
    positionProfit <- rep(0, times=stim_days_num)
    positionEvalScores<-vector("list",stim_days_num)
    PositionDataframe<-vector("list",stim_days_num)
    
    tmp2<-data.frame(udlChgPct=udly_prices_chgPercent)
    tmp2 %>% group_by(udlChgPct) %>% do(pos=XTStim) -> tmp2
    
    tmp2$pos[[i]]$Date<-format(advance(CALENDAR_G,dates=as.Date(pos$Date,format="%Y/%m/%d"),
                                       i,0),"%Y/%m/%d")
    tmp2$pos[[i]]$Date<-format(advance(CALENDAR_G,dates=as.Date(pos$Date,format="%Y/%m/%d"),
                                       i,0),"%Y/%m/%d")
    
    tmp2 %>% group_by(udlChgPct) %>% do(pos=reflectPosChg(.,days=1,IV_DEVIATION=IV_DEVIATION)) -> tmp2
    
    SimRsltPos<-tmp2$pos
    
    print(SimRsltPos)
    
    
    
    for(day_chg in 1:stim_days_num){
    
      #Just for comparison later.
      XTStim_b<-XTStim
      
      #print(day_chg)
      #cat("before IVIDX",XTStim$IVIDX,"\n")
      #cat("iv_chgPercnt ",iv_chgPercnt[day_chg],"\n")
      XTStim$IVIDX<-XTStim$IVIDX*iv_chgPercnt[day_chg]
      #cat("after IVIDX",XTStim$IVIDX,"\n")
      
      ## Create this kind of data frame.
      #       udlChgPct    pos
      #   1     0.03   <S3:data.frame>
      tmp<-seq( ((udly_prices[day_chg]-XTStim_b$UDLY[1])/XTStim_b$UDLY[1]),length=1)
      tmp2<-data.frame(udlChgPct=tmp)
      tmp2 %>% group_by(udlChgPct) %>% do(pos=XTStim) -> tmp2
      
      ## Reflect Position Change
      #
      #days=1 means just 1 day will have passed. 
      tmp2 %>% group_by(udlChgPct) %>% do(pos=reflectPosChg(.,days=1,IV_DEVIATION=IV_DEVIATION)) -> tmp2
      XTStim<-tmp2$pos[[1]]
      
      #XTStim is the above_data_frame$pos which reflects the Date,UDLY,IVIDX,OrigIV,All Greeks
      #cat("UDLY should become ",udly_prices[day_chg],"\n")
      #cat("Actual UDLY ",XTStim$UDLY,"\n")
      #print(XTStim)
      rm(tmp,tmp2)
      
      #Latest (Date,IVIDX) inserted on top of histIV 
      XTStim  %>% select(Date,IVIDX) %>% .[1,] -> tmp
      histIV<-insertRow(histIV,tmp,r=1)
      #Oldest row should be removed
      histIV %>% slice(-nrow(histIV))->histIV
      rm(tmp)
      
      #Caluculate Greeks 
      newPositionGrk<-getPositionGreeks(XTStim,multi=PosMultip,HV_IV_Adjust_Ratio=HV_IV_Adjust_Ratio)
      #print(newPositionGrk)
      
      #Position Profit
      #positionProfit[day_chg]<-(sum(XTStim$Position*XTStim$Price) - sum(XTOrig$Position*XTOrig$Price))*posMultip
      # or
      positionProfit[day_chg]<-newPositionGrk$Price-orgPositionGrk$Price
      
      #EvalScore
      positionEvalScores[[day_chg]] <- newPositionGrk
      
      #ValueGreek
      PositionDataframe[[day_chg]] <- XTStim
      
    }
    
    histIV<-histIVOrig
    #the ith_stim iteration finished
    content_names<-c("Parameter","IniValueGreek","IniEvalScore","AdjustDay","Profit","EvalScore","ValueGreek")
    content_<-vector("list",length(content_names))
    content_[[1]]<-StimulationParameters
    content_[[2]]<-XTOrig
    content_[[3]]<-orgPositionGrk
    content_[[4]]<-day_chg
    content_[[5]]<-positionProfit
    content_[[6]]<-positionEvalScores
    content_[[7]]<-PositionDataframe
    names(content_)<-content_names
    #Result List
    StimRslts[[ith_stim]]<-content_
  }
  cat(" sim_result ",ith_stim, " time: ",(proc.time()-start_t)[3])
  return(StimRslts)
}
